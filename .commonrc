#!/bin/sh
update_dotfiles () {
    RET=$(\
        cd `readlink ${HOME}/.commonrc | xargs dirname`; \
        git pull \
    )
    echo $RET
}

check_dotfiles_update () {
    echo Checking updataing for dotfiles ...
    RET=$(cd `readlink ${HOME}/.commonrc | xargs dirname`; \
          git remote show origin | grep 'out of date')
    if [[ "$RET" != "" ]]; then
        echo "=> dotfiles is out of date."
        read -n 1 -t 3 -p "Do you update dotfiles[Yn](skip after 3s) ? > " key || key="n"
        if [[ "$key" == "" ]]; then echo; fi
        case "$key" in
            [Yy]|"" ) update_dotfiles ;;
            * ) echo "Skipped" ;;
        esac
    else
        echo "=> dotfiles is up to date."
    fi
}
check_dotfiles_update_using_github_api () {
    echo Checking updataing for dotfiles ...
    LATEST_SHA=$(curl -s -H "Accept: application/vnd.github.v3+json" \
        https://api.github.com/repos/yuxia228/dotfiles/commits/master \
        | grep sha \
        | head -1 \
        | cut -d'"' -f 4
    )
    CURRENT_SHA=$(cd `readlink ${HOME}/.commonrc | xargs dirname`; \
        git log | head -1 | awk '{print $2}'
    )
    if [ "$LATEST_SHA" != "$CURRENT_SHA" ];then
        echo "=> dotfiles is out of date."
        update_dotfiles
    else
        echo "=> dotfiles is up to date."
    fi
}
check_dotfiles_update_using_github_api

export PATH=$PATH:${HOME}/bin
if [ -e /home/linuxbrew/.linuxbrew/bin ]; then
    export PATH=$PATH:/home/linuxbrew/.linuxbrew/bin:
fi
source ${HOME}/.aliases
source ${HOME}/.variables

# Common Process
set_term () {
    _terms=(xterm-256color xterm-16color xterm)
    for t in "${_terms[@]}";do
        if infocmp >&/dev/null;then
            break
        else
            export TERM=$t
        fi
    done
}

if [ "$TERM" = "alacritty" ]; then
    TERM=xterm-256color
    set_term
fi

case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# Functions
csv_viewer () {
    column -s, -t < $1 | less -#2 -N -S
}

cdup(){
      cd `for i in $(seq 0 $(pwd | awk -F/ '{print NF}')); do pwd | grep -oE "^/([^/]*/){$i}" ; done | peco`
}

peco-cd () {
    local sw="1"
    while [ "$sw" != "0" ]
    do
        if [ "$sw" = "1" ];then
            local list=$(echo -e "---$PWD\n../\n$( ls -F | grep / )\n---Show hidden directory\n---Show files, $(echo $(ls -F | grep -v / ))\n---HOME DIRECTORY")
        elif [ "$sw" = "2" ];then
            local list=$(echo -e "---$PWD\n$( ls -a -F | grep / | sed 1d )\n---Hide hidden directory\n---Show files, $(echo $(ls -F | grep -v / ))\n---HOME DIRECTORY")
        else
            local list=$(echo -e "---BACK\n$( ls -F | grep -v / )")
        fi

        local slct=$(echo -e "$list" | peco )

        if [ "$slct" = "---$PWD" ];then
            local sw="0"
        elif [ "$slct" = "---Hide hidden directory" ];then
            local sw="1"
        elif [ "$slct" = "---Show hidden directory" ];then
            local sw="2"
        elif [ "$slct" = "---Show files, $(echo $(ls -F | grep -v / ))" ];then
            local sw=$(($sw+2))
        elif [ "$slct" = "---HOME DIRECTORY" ];then
            cd "$HOME"
        elif [[ "$slct" =~ / ]];then
            cd "$slct"
        elif [ "$slct" = "" ];then
            :
        else
            local sw=$(($sw-2))
        fi
    done
}
alias sd='peco-cd'
